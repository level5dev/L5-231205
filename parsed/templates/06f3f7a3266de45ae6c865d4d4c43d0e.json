{"components/products/product-tab-accordion-script":"<script>\n  console.log('product-tab')\n    const targetNode = document.querySelector('.productView-description');\n    let isElementAppended = false;\n    \n    function appendScript() {\n      // Create a new script element\n      const script = document.createElement('script');\n      script.src = \"{{cdn 'assets/js/theme/custom/accordion.js'}}\";\n      script.type = \"module\";\n    \n      // Append the script to the document body or any other appropriate location\n      document.body.appendChild(script);\n    }\n    tabScript();\n    function tabScript(){\n      const cbox = document.querySelectorAll(\"li.tab\");\n      const tabContent = document.querySelectorAll(\".tab-content\");\n      let tabID;\n      for (let i = 0; i < cbox.length; i++) {\n          cbox[i].addEventListener(\"click\", function () {\n              tabID = this.getAttribute('data-id')\n\n              for (let i = 0; i < cbox.length; i++) {\n                  cbox[i].classList.remove('is-active')\n              }\n              this.classList.add('is-active')\n\n              for (let j = 0; j < tabContent.length; j++) {\n                  tabContent[j].classList.remove('is-active')\n              }\n              document.getElementById(tabID).classList.add('is-active')\n          });\n      }\n    }\n    \n    const observer = new MutationObserver((mutationsList, observer) => {\n      for (const mutation of mutationsList) {\n        if (mutation.addedNodes) {\n          for (const addedNode of mutation.addedNodes) {\n            if (addedNode.nodeType === 1 && addedNode.getAttribute('data-accPosition') === 'last') {\n                var $thirdAccordion = document.querySelector('[data-accPosition=\"last\"]');\n                var $firstAccordion = document.querySelector('[data-accPosition=\"first\"]');\n    \n                $thirdAccordion.parentNode.insertBefore($thirdAccordion, $firstAccordion);\n    \n                observer.disconnect();\n                isElementAppended = true;\n    \n                tabScript();\n                appendScript();\n                break;\n            }\n          }\n        }\n      }\n    });\n    \n    observer.observe(targetNode, { childList: true, subtree: true });\n    \n    // Run appendScript() after a certain timeout\n    setTimeout(() => {\n      if (!isElementAppended) {\n        appendScript();\n      }\n    }, 1000); // Adjust the timeout duration as needed\n    \n    \n</script>\n"}
